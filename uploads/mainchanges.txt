from backend.auth import auth_service, get_current_user
from shared.models import *
from backend.database import User
from datetime import datetime
from fastapi import FastAPI, HTTPException, UploadFile, File, Depends
@app.post("/upload", response_model=Dict[str, str])
async def upload_document(
    file: UploadFile = File(...), 
    current_user: User = Depends(get_current_user)
):
    """Upload and process document"""
    if not file.filename:
        raise HTTPException(status_code=400, detail="No file provided")
    
    try:
        file_content = await file.read()
        file_path = save_uploaded_file(file_content, file.filename)
        document_id = doc_processor.process_document(file_path, file.filename, str(current_user.id))
        
        return {
            "message": "Document uploaded and processed successfully",
            "document_id": document_id,
            "filename": file.filename
        }
    except Exception as e:
        import traceback
        print(f"Upload error: {str(e)}")
        print(f"Full traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Processing failed: {str(e)}")

@app.post("/auth/google", response_model=TokenResponse)
async def google_auth(request: GoogleTokenRequest):
    """Authenticate with Google OAuth"""
    try:
        google_user_data = auth_service.verify_google_token(request.token)
        user = auth_service.get_or_create_user(google_user_data)
        
        token = auth_service.create_jwt_token({
            "user_id": user.id,
            "email": user.email,
            "name": user.name
        })
        
        return TokenResponse(
            access_token=token,
            user={
                "id": str(user.id),
                "email": user.email,
                "name": user.name,
                "created_at": user.created_at.isoformat()
            }
        )
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Authentication failed: {str(e)}")

@app.get("/documents", response_model=DocumentListResponse)
async def list_user_documents(current_user: User = Depends(get_current_user)):
    """List current user's documents"""
    try:
        from backend.documents import get_user_documents
        documents = get_user_documents(str(current_user.id))
        return DocumentListResponse(documents=documents)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list documents: {str(e)}")

@app.post("/query", response_model=QueryResponse)
async def query_documents(
    request: QueryRequest, 
    current_user: User = Depends(get_current_user)
):
    """Query documents using RAG"""
    try:
        response_parts = []
        for chunk in rag_service.query_documents(request.query, str(current_user.id), stream=False):
            response_parts.append(chunk)
        
        return QueryResponse(
            response="".join(response_parts),
            sources=[],
            session_id=request.session_id
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Query failed: {str(e)}")

@app.delete("/documents/{document_id}")
async def delete_document(
    document_id: str, 
    current_user: User = Depends(get_current_user)
):
    """Delete a document"""
    try:
        from backend.documents import delete_user_document
        success = delete_user_document(document_id, str(current_user.id))
        if not success:
            raise HTTPException(status_code=404, detail="Document not found")
        return {"message": "Document deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete document: {str(e)}")

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint"""
    status = rag_service.get_service_status()
    return HealthResponse(
        status="healthy",
        services=status,
        timestamp=datetime.utcnow()
    )

@app.get("/documents/{user_id}")
async def list_documents(user_id: str):
    """List user documents - legacy endpoint"""
    try:
        from backend.documents import get_user_documents
        documents = get_user_documents(user_id)
        return {"documents": documents}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list documents: {str(e)}")