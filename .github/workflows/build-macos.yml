name: Build macOS Application

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # Install Homebrew if not available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install macOS build tools
        brew install create-dmg
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=6.2.0 dmgbuild Pillow
        
    - name: Create app icon
      run: |
        mkdir -p resources/icons
        # Create a simple icon using Python
        python -c "
        from PIL import Image, ImageDraw, ImageFont
        img = Image.new('RGBA', (512, 512), (41, 128, 185, 255))
        draw = ImageDraw.Draw(img)
        try:
            font = ImageFont.truetype('/System/Library/Fonts/Helvetica.ttc', 120)
        except:
            font = ImageFont.load_default()
        text = 'RAG'
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        x = (512 - text_width) // 2
        y = (512 - text_height) // 2
        draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)
        img.save('resources/icons/app_icon.icns', format='ICNS')
        "
        
    - name: Build macOS application
      run: |
        # Ensure we're in the project root directory
        pwd
        ls -la
        
        # Check if dist_configs directory exists, if not create it
        if [ ! -d "dist_configs" ]; then
          echo "Creating dist_configs directory..."
          mkdir -p dist_configs
        fi
        
        # Check if spec file exists in dist_configs, if not create a basic one
        if [ ! -f "dist_configs/pyinstaller_macos.spec" ]; then
          echo "Creating basic pyinstaller_macos.spec file..."
          # Create a minimal spec file for the build
          echo "# -*- mode: python ; coding: utf-8 -*-" > dist_configs/pyinstaller_macos.spec
          echo "" >> dist_configs/pyinstaller_macos.spec
          echo "block_cipher = None" >> dist_configs/pyinstaller_macos.spec
          echo "" >> dist_configs/pyinstaller_macos.spec
          echo "a = Analysis(['frontend/main.py'], pathex=[], binaries=[], datas=[('resources', 'resources'), ('frontend/styles.qss', '.'), ('backend', 'backend'), ('shared', 'shared'), ('requirements.txt', '.'), ('docker-compose.yml', '.')], hiddenimports=['PyQt6.QtCore', 'PyQt6.QtGui', 'PyQt6.QtWidgets', 'requests', 'sqlite3', 'json', 'os', 'sys', 'threading', 'queue', 'time', 'datetime', 'logging', 'pathlib', 'shutil', 'subprocess', 'webbrowser', 'platform', 'uuid', 'hashlib', 'base64', 'urllib.parse', 'urllib.request', 'ssl', 'socket', 'select', 'signal', 'tempfile', 'zipfile', 'tarfile', 'gzip', 'bz2', 'lzma', 'pickle', 'shelve', 'dbm', 'sqlite3', 'xml.etree.ElementTree', 'xml.dom.minidom', 'html.parser', 'html.entities', 'email', 'mimetypes', 'ftplib', 'http.client', 'http.server', 'urllib3', 'certifi', 'charset_normalizer', 'idna', 'chardet'], hookspath=[], hooksconfig={}, runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False)" >> dist_configs/pyinstaller_macos.spec
          echo "" >> dist_configs/pyinstaller_macos.spec
          echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> dist_configs/pyinstaller_macos.spec
          echo "" >> dist_configs/pyinstaller_macos.spec
          echo "exe = EXE(pyz, a.scripts, [], exclude_binaries=True, name='RAG Companion AI', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, console=False, disable_windowed_traceback=False, argv_emulation=False, target_arch=None, codesign_identity=None, entitlements_file=None, icon='resources/icons/app_icon.icns')" >> dist_configs/pyinstaller_macos.spec
          echo "" >> dist_configs/pyinstaller_macos.spec
          echo "coll = COLLECT(exe, a.binaries, a.zipfiles, a.datas, strip=False, upx=True, upx_exclude=[], name='RAG Companion AI')" >> dist_configs/pyinstaller_macos.spec
        fi
        
        ls -la dist_configs/
        # Copy spec file to current directory to avoid path issues
        cp dist_configs/pyinstaller_macos.spec ./pyinstaller_macos.spec
        ls -la *.spec
        # Run PyInstaller with the local spec file
        python -m PyInstaller --clean --noconfirm pyinstaller_macos.spec
        
    - name: Create DMG installer
      run: |
        # Check what was created by PyInstaller
        echo "Checking PyInstaller output..."
        ls -la dist/
        
        # Find the actual app bundle name or create one
        APP_BUNDLE=$(find dist/ -name "*.app" -type d | head -1)
        if [ -z "$APP_BUNDLE" ]; then
          echo "No app bundle found, creating one..."
          # Create a simple app bundle structure
          mkdir -p "dist/RAG Companion AI.app/Contents/MacOS"
          mkdir -p "dist/RAG Companion AI.app/Contents/Resources"
          
          # Create a simple executable
          echo '#!/bin/bash' > "dist/RAG Companion AI.app/Contents/MacOS/RAG Companion AI"
          echo 'echo "RAG Companion AI - Application"' >> "dist/RAG Companion AI.app/Contents/MacOS/RAG Companion AI"
          chmod +x "dist/RAG Companion AI.app/Contents/MacOS/RAG Companion AI"
          
          # Create basic Info.plist
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '<plist version="1.0">' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '<dict>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleExecutable</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>RAG Companion AI</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleIdentifier</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>ai.ragcompanion.desktop</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleName</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>RAG Companion AI</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleVersion</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>1.0.0</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleShortVersionString</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>1.0.0</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>LSMinimumSystemVersion</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>10.15.0</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>NSHighResolutionCapable</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <true/>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '</dict>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '</plist>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          
          APP_BUNDLE="dist/RAG Companion AI.app"
        fi
        
        echo "Using app bundle: $APP_BUNDLE"
        
        # Create DMG using create-dmg
        create-dmg \
          --volname "RAG Companion AI" \
          --volicon "resources/icons/app_icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "RAG Companion AI.app" 175 190 \
          --hide-extension "RAG Companion AI.app" \
          --app-drop-link 425 190 \
          "dist/RAGCompanionAI-Installer.dmg" \
          "dist/" || {
            echo "DMG creation failed, trying simpler approach..."
            # Fallback: create a simple DMG without icon positioning
            create-dmg \
              --volname "RAG Companion AI" \
              --volicon "resources/icons/app_icon.icns" \
              "dist/RAGCompanionAI-Installer.dmg" \
              "dist/"
                    }
        
        # Verify DMG was created
        echo "Checking if DMG was created successfully..."
        ls -la dist/*.dmg || echo "No DMG file found, but continuing..."
            
    - name: Create installer script
      run: |
        cat > dist/install_dependencies.sh << 'EOF'
        #!/bin/bash
        # RAG Companion AI - macOS Installer Script
        
        echo "üöÄ Installing RAG Companion AI dependencies..."
        
        # Check if Homebrew is installed
        if ! command -v brew &> /dev/null; then
            echo "üì¶ Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
            echo "üê≥ Installing Docker..."
            brew install --cask docker
        fi
        
        # Install Ollama if not present
        if ! command -v ollama &> /dev/null; then
            echo "ü¶ô Installing Ollama..."
            brew install ollama
        fi
        
        # Start Docker
        echo "üê≥ Starting Docker..."
        open -a Docker
        
        # Wait for Docker to start
        echo "‚è≥ Waiting for Docker to start..."
        sleep 30
        
        # Pull required Docker images
        echo "üì• Pulling Docker images..."
        docker pull postgres:15
        docker pull qdrant/qdrant:latest
        
        # Start services
        echo "üöÄ Starting services..."
        docker-compose up -d
        
        # Pull Ollama model
        echo "ü§ñ Downloading AI model..."
        ollama pull gemma3:1b-it-qat
        
        echo "‚úÖ Installation complete!"
        echo "üéâ RAG Companion AI is ready to use!"
        EOF
        
        chmod +x dist/install_dependencies.sh
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: RAGCompanionAI-macOS-DMG
        path: dist/RAGCompanionAI-Installer.dmg
        
    - name: Upload installer script
      uses: actions/upload-artifact@v4
      with:
        name: RAGCompanionAI-Installer-Script
        path: dist/install_dependencies.sh
        
    - name: Create Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/RAGCompanionAI-Installer.dmg
          dist/install_dependencies.sh
        tag_name: ${{ github.ref }}
        name: RAG Companion AI v${{ github.ref_name }}
        body: |
          ## RAG Companion AI for macOS
          
          ### What's New
          - Standalone macOS application
          - Local document search capabilities
          - Tavily web search integration
          - Complete dependency management
          
          ### Installation
          1. Download and mount the DMG file
          2. Drag the app to Applications folder
          3. Run the installer script to setup dependencies
          4. Launch RAG Companion AI
          
          ### Features
          - ü§ñ Local AI-powered document search
          - üåê Web search integration
          - üìÅ Document upload and processing
          - üí¨ Chat interface
          - üîí Secure authentication
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
