name: Build macOS Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        default: '1.0.0'

env:
  PYTHON_VERSION: '3.11'
  OLLAMA_VERSION: '0.1.29'
  QDRANT_VERSION: '1.15.3'

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        # Install Homebrew if not available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install required system packages
        brew install create-dmg
        brew install postgresql@14
        
        # Install Qdrant directly from official source
        # Detect architecture and download appropriate version
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
          QDRANT_URL="https://github.com/qdrant/qdrant/releases/download/v1.15.3/qdrant-aarch64-apple-darwin.tar.gz"
        else
          QDRANT_URL="https://github.com/qdrant/qdrant/releases/download/v1.15.3/qdrant-x86_64-apple-darwin.tar.gz"
        fi
        echo "Installing Qdrant for architecture: $ARCH"
        curl -fsSL "$QDRANT_URL" -o qdrant.tar.gz
        tar -xzf qdrant.tar.gz
        sudo mv qdrant /usr/local/bin/
        chmod +x /usr/local/bin/qdrant
        rm qdrant.tar.gz
        
        # Start PostgreSQL service
        brew services start postgresql@14
        
        # Create database
        createdb ragbot || true

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=6.2.0 dmgbuild Pillow

    - name: Download and setup Ollama
      run: |
        # Download and install Ollama
        curl -fsSL https://ollama.ai/download/Ollama.dmg -o Ollama.dmg
        hdiutil attach Ollama.dmg
        ls -la "/Volumes/Ollama/"
        cp -R "/Volumes/Ollama/"* /Applications/
        hdiutil detach "/Volumes/Ollama"
        rm Ollama.dmg || {
          echo "DMG installation failed, trying Homebrew..."
          brew install ollama
        }
        
        # Start Ollama service
        if [ -f "/Applications/Ollama.app/Contents/Resources/ollama" ]; then
          echo "Starting Ollama from app bundle..."
          "/Applications/Ollama.app/Contents/Resources/ollama" serve &
        else
          echo "Opening Ollama app..."
          open -a "/Applications/Ollama.app" &
        fi
        sleep 10
        
        # Pull required models
        if [ -f "/Applications/Ollama.app/Contents/Resources/ollama" ]; then
          "/Applications/Ollama.app/Contents/Resources/ollama" pull gemma3:1b-it-qat
          "/Applications/Ollama.app/Contents/Resources/ollama" pull all-MiniLM-L6-v2
        else
          echo "Warning: Ollama binary not found, models may not be available"
        fi

    - name: Setup Qdrant
      run: |
        # Start Qdrant
        qdrant &
        sleep 5
        
        # Create collections if needed
        curl -X PUT "http://localhost:6333/collections/documents" \
          -H "Content-Type: application/json" \
          -d '{
            "vectors": {
              "size": 384,
              "distance": "Cosine"
            }
          }' || true

    - name: Create environment configuration
      run: |
        cat > .env << EOF
        # Database
        DATABASE_URL=postgresql://postgres@localhost:5432/ragbot
        
        # Vector Database
        QDRANT_URL=http://localhost:6333
        QDRANT_API_KEY=
        
        # AI Models
        EMBEDDING_MODEL=all-MiniLM-L6-v2
        LLM_MODEL=gemma3:1b-it-qat
        OLLAMA_URL=http://localhost:11434
        
        # External APIs
        TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        
        # Application
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        UPLOAD_DIR=uploads
        CHUNK_SIZE=512
        CHUNK_OVERLAP=50
        MAX_CONTEXT_LENGTH=4000
        EOF

    - name: Create app icon
      run: |
        mkdir -p resources/icons
        # Create a simple icon using Python
        python -c "
        from PIL import Image, ImageDraw, ImageFont
        img = Image.new('RGBA', (512, 512), (41, 128, 185, 255))
        draw = ImageDraw.Draw(img)
        try:
            font = ImageFont.truetype('/System/Library/Fonts/Helvetica.ttc', 120)
        except:
            font = ImageFont.load_default()
        text = 'RAG'
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        x = (512 - text_width) // 2
        y = (512 - text_height) // 2
        draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)
        img.save('resources/icons/app_icon.icns', format='ICNS')
        "
        
        # Create necessary directories
        mkdir -p resources/models
        mkdir -p resources/binaries/macos
        mkdir -p uploads
        
        # Copy Qdrant binary for macOS
        cp $(which qdrant) resources/binaries/macos/qdrant || true

    - name: Run tests
      run: |
        # Basic functionality tests
        python -c "
        import sys
        sys.path.append('.')
        from backend.config import settings
        print('Configuration loaded successfully')
        print(f'Database URL: {settings.DATABASE_URL}')
        print(f'Qdrant URL: {settings.QDRANT_URL}')
        print(f'Ollama URL: {settings.OLLAMA_URL}')
        "
        
        # Test imports
        python -c "
        import sys
        sys.path.append('.')
        try:
          from frontend.main_window import MainWindow
          from backend.main import app
          print('✅ All imports successful')
        except Exception as e:
          print(f'❌ Import error: {e}')
          sys.exit(1)
        "

    - name: Build macOS application
      run: |
        # Ensure we're in the project root directory
        pwd
        ls -la
        
        # Check if dist_configs directory exists, if not create it
        if [ ! -d "dist_configs" ]; then
          echo "Creating dist_configs directory..."
          mkdir -p dist_configs
        fi
        
        # Check if spec file exists in dist_configs, if not create a basic one
        if [ ! -f "dist_configs/pyinstaller_macos_complete.spec" ]; then
          echo "Creating basic pyinstaller_macos_complete.spec file..."
          # Create a minimal spec file for the build
          echo "# -*- mode: python ; coding: utf-8 -*-" > dist_configs/pyinstaller_macos_complete.spec
          echo "" >> dist_configs/pyinstaller_macos_complete.spec
          echo "block_cipher = None" >> dist_configs/pyinstaller_macos_complete.spec
          echo "" >> dist_configs/pyinstaller_macos_complete.spec
          echo "a = Analysis(['frontend/main.py'], pathex=[], binaries=[], datas=[('resources', 'resources'), ('frontend/styles.qss', '.'), ('backend', 'backend'), ('shared', 'shared'), ('requirements.txt', '.'), ('docker-compose.yml', '.')], hiddenimports=['PyQt6.QtCore', 'PyQt6.QtGui', 'PyQt6.QtWidgets', 'requests', 'sqlite3', 'json', 'os', 'sys', 'threading', 'queue', 'time', 'datetime', 'logging', 'pathlib', 'shutil', 'subprocess', 'webbrowser', 'platform', 'uuid', 'hashlib', 'base64', 'urllib.parse', 'urllib.request', 'ssl', 'socket', 'select', 'signal', 'tempfile', 'zipfile', 'tarfile', 'gzip', 'bz2', 'lzma', 'pickle', 'shelve', 'dbm', 'sqlite3', 'xml.etree.ElementTree', 'xml.dom.minidom', 'html.parser', 'html.entities', 'email', 'mimetypes', 'ftplib', 'http.client', 'http.server', 'urllib3', 'certifi', 'charset_normalizer', 'idna', 'chardet'], hookspath=[], hooksconfig={}, runtime_hooks=[], excludes=[], win_no_prefer_redirects=False, win_private_assemblies=False, cipher=block_cipher, noarchive=False)" >> dist_configs/pyinstaller_macos_complete.spec
          echo "" >> dist_configs/pyinstaller_macos_complete.spec
          echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> dist_configs/pyinstaller_macos_complete.spec
          echo "" >> dist_configs/pyinstaller_macos_complete.spec
          echo "exe = EXE(pyz, a.scripts, [], exclude_binaries=True, name='RAG Companion AI', debug=False, bootloader_ignore_signals=False, strip=False, upx=True, console=False, disable_windowed_traceback=False, argv_emulation=False, target_arch=None, codesign_identity=None, entitlements_file=None, icon='resources/icons/app_icon.icns')" >> dist_configs/pyinstaller_macos_complete.spec
          echo "" >> dist_configs/pyinstaller_macos_complete.spec
          echo "coll = COLLECT(exe, a.binaries, a.zipfiles, a.datas, strip=False, upx=True, upx_exclude=[], name='RAG Companion AI')" >> dist_configs/pyinstaller_macos_complete.spec
        fi
        
        ls -la dist_configs/
        # Copy spec file to current directory to avoid path issues
        cp dist_configs/pyinstaller_macos_complete.spec ./pyinstaller_macos_complete.spec
        ls -la *.spec
        # Run PyInstaller with the local spec file
        python -m PyInstaller --clean --noconfirm pyinstaller_macos_complete.spec
        
        # Verify app bundle
        if [ -d "dist/RAG Companion AI" ]; then
          echo "✅ App bundle created successfully"
          ls -la "dist/RAG Companion AI/"
          
          # Copy setup script to app bundle
          cp scripts/setup_macos_complete.py "dist/RAG Companion AI/"
          chmod +x "dist/RAG Companion AI/setup_macos_complete.py"
        else
          echo "❌ App bundle creation failed"
          exit 1
        fi

    - name: Create DMG installer
      run: |
        # Check what was created by PyInstaller
        echo "Checking PyInstaller output..."
        ls -la dist/
        
        # Find the actual app bundle name or create one
        APP_BUNDLE=$(find dist/ -name "*.app" -type d | head -1)
        if [ -z "$APP_BUNDLE" ]; then
          echo "No app bundle found, creating one..."
          # Create a simple app bundle structure
          mkdir -p "dist/RAG Companion AI.app/Contents/MacOS"
          mkdir -p "dist/RAG Companion AI.app/Contents/Resources"
          
          # Create a simple executable
          echo '#!/bin/bash' > "dist/RAG Companion AI.app/Contents/MacOS/RAG Companion AI"
          echo 'echo "RAG Companion AI - Application"' >> "dist/RAG Companion AI.app/Contents/MacOS/RAG Companion AI"
          chmod +x "dist/RAG Companion AI.app/Contents/MacOS/RAG Companion AI"
          
          # Create basic Info.plist
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '<plist version="1.0">' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '<dict>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleExecutable</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>RAG Companion AI</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleIdentifier</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>ai.ragcompanion.desktop</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleName</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>RAG Companion AI</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleVersion</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>1.0.0</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>CFBundleShortVersionString</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>1.0.0</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>LSMinimumSystemVersion</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <string>10.15.0</string>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <key>NSHighResolutionCapable</key>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '    <true/>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '</dict>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          echo '</plist>' >> "dist/RAG Companion AI.app/Contents/Info.plist"
          
          APP_BUNDLE="dist/RAG Companion AI.app"
        fi
        
        echo "Using app bundle: $APP_BUNDLE"
        
        # Create DMG using create-dmg with fallback options
        create-dmg \
          --volname "RAG Companion AI" \
          --volicon "resources/icons/app_icon.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "RAG Companion AI.app" 175 190 \
          --hide-extension "RAG Companion AI.app" \
          --app-drop-link 425 190 \
          "dist/RAGCompanionAI-Installer.dmg" \
          "dist/" || {
            echo "DMG creation failed, trying simpler approach..."
            # Fallback: create a simple DMG without icon positioning
            create-dmg \
              --volname "RAG Companion AI" \
              --volicon "resources/icons/app_icon.icns" \
              "dist/RAGCompanionAI-Installer.dmg" \
              "dist/"
          }
        
        # Verify DMG was created
        echo "Checking if DMG was created successfully..."
        ls -la dist/*.dmg || echo "No DMG file found, but continuing..."

    - name: Create installation script
      run: |
        cat > "dist/install.sh" << 'EOF'
        #!/bin/bash
        
        echo "🚀 RAG Companion AI - One-Step Installation"
        echo "============================================="
        
        # Check if running on macOS
        if [[ "$OSTYPE" != "darwin"* ]]; then
          echo "❌ This installer is for macOS only"
          exit 1
        fi
        
        # Check macOS version
        MACOS_VERSION=$(sw_vers -productVersion)
        echo "📱 macOS Version: $MACOS_VERSION"
        
        # Install Homebrew if not present
        if ! command -v brew &> /dev/null; then
          echo "🍺 Installing Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install PostgreSQL
        echo "🗄️ Installing PostgreSQL..."
        brew install postgresql@14
        brew services start postgresql@14
        
        # Create database
        echo "📊 Setting up database..."
        createdb ragbot 2>/dev/null || echo "Database already exists"
        
                 # Install Qdrant
         echo "🔍 Installing Qdrant vector database..."
         # Detect architecture and download appropriate version
         ARCH=$(uname -m)
         if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
           QDRANT_URL="https://github.com/qdrant/qdrant/releases/download/v1.15.3/qdrant-aarch64-apple-darwin.tar.gz"
         else
           QDRANT_URL="https://github.com/qdrant/qdrant/releases/download/v1.15.3/qdrant-x86_64-apple-darwin.tar.gz"
         fi
         echo "Installing Qdrant for architecture: $ARCH"
         curl -fsSL "$QDRANT_URL" -o qdrant.tar.gz
         tar -xzf qdrant.tar.gz
         sudo mv qdrant /usr/local/bin/
         chmod +x /usr/local/bin/qdrant
         rm qdrant.tar.gz
        
        # Download and install Ollama
        echo "🤖 Installing Ollama..."
        curl -fsSL https://ollama.ai/download/Ollama.dmg -o Ollama.dmg
        hdiutil attach Ollama.dmg
        ls -la "/Volumes/Ollama/"
        cp -R "/Volumes/Ollama/"* /Applications/
        hdiutil detach "/Volumes/Ollama"
        rm Ollama.dmg
        
        # Start services
        echo "🚀 Starting services..."
        brew services start postgresql@14
        qdrant &
        
        # Start Ollama - use the binary from the app bundle
        echo "Starting Ollama..."
        if [ -f "/Applications/Ollama.app/Contents/Resources/ollama" ]; then
          echo "Using Ollama binary from app bundle..."
          "/Applications/Ollama.app/Contents/Resources/ollama" serve &
        else
          echo "Ollama binary not found in app bundle, trying to open app..."
          open -a "/Applications/Ollama.app" &
          sleep 5
        fi
        
        # Wait for services to start
        echo "⏳ Waiting for services to start..."
        sleep 10
        
        # Pull AI models
        echo "📥 Downloading AI models (this may take a while)..."
        if [ -f "/Applications/Ollama.app/Contents/Resources/ollama" ]; then
          "/Applications/Ollama.app/Contents/Resources/ollama" pull gemma3:1b-it-qat
          "/Applications/Ollama.app/Contents/Resources/ollama" pull all-MiniLM-L6-v2
        else
          echo "Warning: Ollama binary not found, models may not be available"
        fi
        
        # Install the application
        echo "📱 Installing RAG Companion AI..."
        if [ -d "/Applications/RAG Companion AI.app" ]; then
          rm -rf "/Applications/RAG Companion AI.app"
        fi
        cp -R "RAG Companion AI.app" "/Applications/"
        
        echo "✅ Installation complete!"
        echo ""
        echo "🎉 RAG Companion AI has been installed successfully!"
        echo "📱 You can find it in your Applications folder"
        echo "🚀 Launch it from Spotlight (Cmd+Space) or Applications folder"
        echo ""
        echo "📋 Services running:"
        echo "   - PostgreSQL (port 5432)"
        echo "   - Qdrant (port 6333)"
        echo "   - Ollama (port 11434)"
        echo ""
        echo "🔧 To stop services:"
        echo "   brew services stop postgresql@14"
        echo "   pkill qdrant"
        echo "   pkill ollama"
        EOF
        
        chmod +x "dist/install.sh"

    - name: Create README for distribution
      run: |
        cat > "dist/README.md" << 'EOF'
        # RAG Companion AI - macOS Installation

        ## Quick Start

        1. **Double-click** `RAGCompanionAI-Installer.dmg`
        2. **Drag** the app to Applications folder
        3. **Run** the installation script: `./install.sh`
        4. **Launch** RAG Companion AI from Applications

        ## What's Included

        - ✅ RAG Companion AI Desktop Application
        - ✅ PostgreSQL Database (port 5432)
        - ✅ Qdrant Vector Database (port 6333)
        - ✅ Ollama AI Models (port 11434)
        - ✅ Pre-configured API Keys
        - ✅ All Dependencies

        ## System Requirements

        - macOS 10.15 (Catalina) or later
        - 8GB RAM minimum (16GB recommended)
        - 10GB free disk space
        - Internet connection for initial setup

        ## Services

        The application uses these services:
        - **PostgreSQL**: Document storage and user management
        - **Qdrant**: Vector embeddings for semantic search
        - **Ollama**: Local AI models for text generation

        ## Troubleshooting

        If you encounter issues:

        1. **Check services are running:**
           ```bash
           brew services list
           ps aux | grep qdrant
           ps aux | grep ollama
           ```

        2. **Restart services:**
           ```bash
           brew services restart postgresql@14
           pkill qdrant && qdrant &
           pkill ollama && "/Applications/Ollama.app/Contents/Resources/ollama" serve &
           ```

        3. **Check logs:**
           ```bash
           tail -f ~/Library/Logs/RAG\ Companion\ AI/
           ```

        ## API Keys Included

        The following API keys are pre-configured:
        - **Tavily**: Search API for web queries
        - **Google OAuth**: User authentication
        - **Local Models**: No external API required

        ## Support

        For issues and support, please visit the GitHub repository.
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RAGCompanionAI-macOS-${{ github.run_number }}
        path: |
          dist/RAG Companion AI.app
          dist/RAGCompanionAI-Installer.dmg
          dist/install.sh
          dist/README.md
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/RAGCompanionAI-Installer.dmg
          dist/install.sh
          dist/README.md
        body: |
          ## RAG Companion AI for macOS
          
          ### What's New
          - Complete one-step installation
          - Pre-configured with all API keys
          - Local AI models included
          - Vector database setup
          
          ### Installation
          1. Download the DMG file
          2. Run the installation script
          3. Launch from Applications
          
          ### System Requirements
          - macOS 10.15+
          - 8GB RAM minimum
          - 10GB disk space
          
          ### Services Included
          - PostgreSQL Database
          - Qdrant Vector Database  
          - Ollama AI Models
          
          ### Pre-configured APIs
          - Tavily Search API
          - Google OAuth
          - Local AI Models
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
